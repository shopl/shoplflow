---
description:
globs:
alwaysApply: true
---
# Story 문서 자동 생성 Rule
이 Rule은 Story 문서를 자동 생성하기 위한 흐름이며, 사용자의 확인 없이는 어떤 파일도 변경되지 않습니다.
아래 flow에 따라 문서를 생성합니다.

# 1. Trigger Pattern

사용자가 `{ComponentName}의 스토리 문서 작성해줘` 또는 `{ComponentName} 스토리 작성해줘` 라고 요청할 때 활성화됩니다.

# 2. 필수 요소 확인  (Guard Clause)

## 2-1. figma 링크 확인

트리거 패턴 활성화 시 figma 링크가 제공되지 않은 경우, "Design tab에 노출할 figma 링크를 알려주세요"라고 요청합니다. figma 링크를 받기 전까지 아무 작업도 하지 않으며,  링크를 받은 이후 다음 flow를 실행합니다.

## 2-2: 스토리 생성/리팩토링 여부 확인

이미 해당 컴포넌트의 스토리 문서 {ComponentName}.stories.tsx 가 존재할 경우, “{ComponentName} 스토리 문서는 이미 존재합니다. 리팩토링을 진행할까요?” 라고 안내합니다. 긍정적인 확인을 받을 때까지 아무 작업도 진행하지 않습니다. 긍정적인 컨펌을 받고나서야 패턴 학습을 시작합니다.

# 3. 패턴 학습 (Few-shot Prompting)

다음 파일들을 참조하여 패턴을 학습합니다:

- `@Button.stories.tsx` (주요 참조)
- `@Button.mdx`
- `@Checkbox.stories.tsx`
- `@Input.stories.tsx`


### 패턴 학습 flow

- `.mdx` 파일 : 목차 순서, Meta 객체 구조 확인
- 해당 컴포넌트의 `.tsx`, `.types.ts` 파일 확인
    - Props 타입 정의 추출
    - Enum/Union 타입 variants 감지 (예: ButtonStyleVariants, ButtonSizeVariants)

# 4. 초안 작성
(Slot-filling Prompting, Structured Prompting)

## Layout 표준화

- `ComponentStage`로 래핑
- `Stack` 컴포넌트 활용
- 적절한 width/height 설정

## Convention 자동 적용

<문체 통일>

- 모든 description은 `~습니다` 문체 사용
- 간결하고 명확한 설명

<Import 패턴>

- 상대 경로 사용
- 필요한 타입들 자동 import
- Icon, Stack 등 공통 컴포넌트 import

<Code Style>

- 함수형 컴포넌트 스타일
- TypeScript 타입 명시
- 일관된 네이밍 컨벤션

## ArgTypes 자동 생성 규칙 (Controls 최적화)

**⚠️ 중요: option을 text로 입력하지마세요. Props Table에선 가급적 Dropdown을 사용하고, 직접 타이핑이나 set object 버튼은 지양합니다.**

**Controls 규칙:**

- option이 2개 이하일 경우 Radio 사용
- option이 3개 이상일 경우 Select 사용
- **Enum/Union 타입**:
    - options: `Object.values(EnumName)` 또는 `Object.keys(objectName)` 사용
    - control: 2개 이하 → `{ type: 'radio' }`, 3개 이상 → `{ type: 'select' }`
    - 반드시 options 배열 명시하여 dropdown 보장
- **Boolean 타입**: `control: { type: 'boolean' }` (체크박스)
- **Function 타입**: `action: 'clicked'` (onClick 등)
- **String 타입 (제한된 값)**:
    - 가능한 값들이 정해져 있다면 `options` + `control: { type: 'select' }` 사용
    - 예: color props → `options: Object.keys(colorTokens)`
- **Number 타입 (제한된 범위)**:
    - 가능하다면 `control: { type: 'range', min: X, max: Y }` 사용
- **Description**: `{prop명}을/를 설정합니다.` 형식으로 통일

## 필수 Stories 생성

1. **Playground**: 기본 인터랙티브 스토리
2. **Variant별 스토리**: enum 값 기반으로 자동 생성
3. **Special Cases**: disabled, error 등 boolean props 기반

## 특별 처리사항

<기존 파일이 있는 경우>

- 기존 내용을 가급적 유지하되 목차에 맞지 않는 부분은 수정
- argTypes 리팩토링 제안

<복잡한 컴포넌트>

- Compound Component 패턴 감지 (예: Tabs.Tab)
- 특수 Props 처리 (leftSource, rightSource 등)
- 상태 관리가 필요한 경우 useState 자동 추가

<Props Table 최적화>

- 모든 선택 가능한 값들은 options 배열로 명시
- control 타입을 명확히 지정하여 Storybook UI 일관성 보장
- 불필요한 text input이나 object input 방지

<품질 보장>

- TypeScript 타입 에러 방지
- Storybook 빌드 에러 방지
- 일관된 코드 품질 유지
- Props Table의 사용자 경험 최적화

# 5. 초안 확인 (Chain of Thought , Human-in-the-loop)

사용자에게 아래 정보에 대한 계획 브리핑 및 사전 컨펌 요청

⛔️ 코드 변경은 사용자 컨펌 전까지 절대 없음

- stories.tsx 파일에 어떤 StoryFn을 생성할지 목록 (예: Playground, Primary, Secondary 등)
- {ComponentName}.mdx 파일의 초안 (markdown preview)

"이렇게 진행할까요? 수정하거나 제외할 항목이 있다면 말씀해주세요." 질문 후 답변 대기

# 6. 문서 생성/리팩토링

{컴포넌트}.mdx, {컴포넌트}.stories.tsx 파일 생성 또는 기존 파일 리팩토링